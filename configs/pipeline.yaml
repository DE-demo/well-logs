AWSTemplateFormatVersion: 2010-09-09
Description: Bucket to host well logs and Lambda deployment

Parameters:
  ResourceName:
    Description: A name to use for all created resources
    Default: well-logs-dbf
    Type: String

Resources:
  Bucket:
    Type: AWS::S3::Bucket
    DependsOn:
      - LambdaPermission
    Properties:
      BucketName: !Ref ResourceName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .tif
            Function: !GetAtt LambdaFunction.Arn

  DynamodbTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref ResourceName
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 25
        WriteCapacityUnits: 25

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref ResourceName
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.12
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"status": 200, "message": "hello!"}
      MemorySize: 1024
      Timeout: 30

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref ResourceName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess

  LambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - LambdaFunction
    Properties:
      FunctionName: !Ref ResourceName
      Principal: s3.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Sub 'arn:aws:s3:::${ResourceName}'
      SourceAccount: !Ref 'AWS::AccountId'
